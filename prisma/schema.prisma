// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======================================================================
// 1. БАЗОВЫЕ И АУТЕНТИФИКАЦИОННЫЕ МОДЕЛИ
// ======================================================================

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  passwordHash String
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Связи
  fileAssets   FileAsset[]
  folders      PersonalFolder[]
}

enum Role {
  USER
  ADMIN
}

// ======================================================================
// 2. УНИФИЦИРОВАННАЯ СИСТЕМА ФАЙЛОВ (FileAsset) - ЯДРО СИСТЕМЫ
// ======================================================================

// Центральная модель для ЛЮБОГО файла в системе
model FileAsset {
  id               Int         @id @default(autoincrement())
  uuid             String      @unique @default(uuid())
  originalFilename String
  s3Key            String      @unique
  sizeBytes        BigInt
  mimeType         String
  status           AssetStatus @default(PENDING)
  
  createdAt        DateTime    @default(now())
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int

  assetType        AssetType
  
  mediaFileMeta    MediaFileMeta?
  personalFileMeta PersonalFileMeta?

  @@map("file_assets")
}

enum AssetStatus {
  PENDING
  PROCESSING
  AVAILABLE
  ERROR
}

enum AssetType {
  MEDIA_SOURCE
  PERSONAL
}

// Метаданные для МЕДИА-файла
model MediaFileMeta {
  id              Int      @id @default(autoincrement())
  asset           FileAsset @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId         Int      @unique
  
  derivedStreams  MediaStream[]
  
  linkedEpisodeId Int?
  linkedEpisode   Episode? @relation(fields: [linkedEpisodeId], references: [id], onDelete: SetNull)

  @@map("media_file_meta")
}

// Метаданные для ЛИЧНОГО файла
model PersonalFileMeta {
  id         Int      @id @default(autoincrement())
  asset      FileAsset @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId    Int      @unique

  folderId   Int?
  folder     PersonalFolder? @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@map("personal_file_meta")
}

// Папка в личном хранилище
model PersonalFolder {
  id         Int      @id @default(autoincrement())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int

  parentId   Int?
  parent     PersonalFolder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children   PersonalFolder[] @relation("FolderHierarchy")

  files      PersonalFileMeta[]

  @@unique([userId, parentId, name])
  @@map("personal_folders")
}

// ======================================================================
// 3. МЕДИА-ЧАСТЬ (Сериалы, Эпизоды, Сборки)
// ======================================================================

model MediaStream {
  id                Int      @id @default(autoincrement())
  type              StreamType
  filePath          String
  qualityLabel      String
  codecInfo         String?
  language          String?
  
  sourceMediaFile   MediaFileMeta @relation(fields: [sourceMediaFileId], references: [id], onDelete: Cascade)
  sourceMediaFileId Int

  compositionsAsVideo Composition[] @relation("VideoSource")
  compositionsAsAudio Composition[] @relation("AudioSource")
  compositionsAsSub   Composition[] @relation("SubtitleSource")

  @@map("media_streams")
}

enum StreamType {
  VIDEO
  AUDIO
  SUBTITLE
}

model Composition {
  id            Int         @id @default(autoincrement())
  name          String
  audioOffsetMs Int         @default(0)
  createdAt     DateTime    @default(now())
  
  episode       Episode     @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId     Int

  videoStream   MediaStream @relation("VideoSource", fields: [videoStreamId], references: [id], onDelete: Cascade)
  videoStreamId Int

  audioStream   MediaStream @relation("AudioSource", fields: [audioStreamId], references: [id], onDelete: Cascade)
  audioStreamId Int

  subtitleStream  MediaStream? @relation("SubtitleSource", fields: [subtitleStreamId], references: [id], onDelete: SetNull)
  subtitleStreamId Int?

  translator    Translator? @relation(fields: [translatorId], references: [id], onDelete: SetNull) // onDelete: SetNull, чтобы удаление переводчика не ломало сборки
  translatorId  Int?

  @@map("compositions")
}

model Translator {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  compositions Composition[]

  @@map("translators")
}

model Series {
  id         Int       @id @default(autoincrement())
  title      String    @unique
  posterUrl  String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  seasons    Season[]
  externalIds Json?

  @@map("series")
}

model Season {
  id            Int      @id @default(autoincrement())
  seasonNumber  Int
  createdAt     DateTime @default(now())
  series        Series   @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  seriesId      Int
  episodes      Episode[]

  @@unique([seriesId, seasonNumber])
  @@map("seasons")
}

model Episode {
  id             Int           @id @default(autoincrement())
  episodeNumber  Int
  title          String?
  createdAt      DateTime      @default(now())
  season         Season        @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId       Int

  compositions     Composition[]
  linkedMediaFiles MediaFileMeta[]

  externalIds    Json?

  @@unique([seasonId, episodeNumber])
  @@map("episodes")
}