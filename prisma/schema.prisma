// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======================================================================
// 1. БАЗОВЫЕ МОДЕЛИ (User, Role)
// ======================================================================

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  passwordHash String
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  storageNodes StorageNode[]
}

enum Role {
  USER
  ADMIN
}

// ======================================================================
// 2. ЯДРО: СЕРВИС ХРАНИЛИЩА (Storage Service)
// ======================================================================

model StorageNode {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  type      NodeType // 'FILE' или 'FOLDER'
  name      String   // Имя файла или папки

  // -- Поля, специфичные для ФАЙЛОВ --
  s3Key     String?  @unique // У папок его нет
  mimeType  String?
  sizeBytes BigInt?
  status    NodeStatus @default(AVAILABLE)

  // -- Общие поля --
  meta      Json?    // Для любой дополнительной информации
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   Int

  // -- Иерархия --
  parentId  Int?
  parent    StorageNode?  @relation("NodeHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children  StorageNode[] @relation("NodeHierarchy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([ownerId, parentId, name])
  @@map("storage_nodes")
}

enum NodeType {
  FILE
  FOLDER
}

enum NodeStatus {
  PENDING     // Ожидает загрузки/обработки
  PROCESSING  // В процессе обработки воркером
  AVAILABLE   // Готов к использованию
  ERROR       // Ошибка обработки
}