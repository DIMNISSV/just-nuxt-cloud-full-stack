import { Worker } from 'bullmq'
import { execa } from 'execa'
import path from 'path'
import { mkdir, readdir, rm, stat } from 'fs/promises'
import { createReadStream } from 'fs'
import mime from 'mime-types' // –ü–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è MIME-—Ç–∏–ø–∞
import prisma from './server/utils/prisma'
import { uploadToS3 } from './server/utils/s3'
import { appConfig, runtimeConfig } from './config'
import { AssetType, Prisma } from '@prisma/client'
import type { DownloadUrlJobData, ProcessMediaJobData, WatchMetadataJobData } from './server/utils/queue'
import { addMediaJob } from './server/utils/queue'

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞: npm install mime-types @types/mime-types

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
const redisConfig = runtimeConfig.redis
const connection = { host: redisConfig.host, port: redisConfig.port }
const tempDirBase = appConfig.worker.tempDir

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–ì–†–£–ó–ö–ò –ü–û URL ===
const downloadUrlWorker = new Worker<DownloadUrlJobData>(
    'download-url-job',
    async (job) => {
        const { assetId, sourceUrl } = job.data
        console.log(`[DownloadWorker] –ù–∞—á–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ URL –¥–ª—è Asset ID: ${assetId}`)

        const asset = await prisma.fileAsset.findUnique({ where: { id: assetId } })
        if (!asset) {
            throw new Error(`–ê—Å—Å–µ—Ç ${assetId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`)
        }

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const tempDir = path.join(tempDirBase, asset.uuid)
        await mkdir(tempDir, { recursive: true })

        try {
            await prisma.fileAsset.update({
                where: { id: assetId },
                data: { status: 'PROCESSING' },
            })

            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é yt-dlp –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            await execa(appConfig.binaries.ytdlp, [
                '-P', tempDir,
                '-o', '%(title)s.%(ext)s',
                sourceUrl
            ])

            const files = await readdir(tempDir)
            if (files.length === 0) throw new Error('–§–∞–π–ª –Ω–µ –±—ã–ª —Å–∫–∞—á–∞–Ω.')

            const downloadedFilename = files[0]
            const localFilePath = path.join(tempDir, downloadedFilename)
            const fileStat = await stat(localFilePath)

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π S3 –∫–ª—é—á
            const permanentS3Key = asset.assetType === 'PERSONAL'
                ? `personal/${asset.userId}/${asset.uuid}/${downloadedFilename}`
                : `media/sources/${asset.uuid}/${downloadedFilename}`

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ S3
            await uploadToS3(localFilePath, permanentS3Key)

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            const finalStatus = asset.assetType === 'MEDIA_SOURCE' ? 'PROCESSING' : 'AVAILABLE'
            const updatedAsset = await prisma.fileAsset.update({
                where: { id: assetId },
                data: {
                    originalFilename: downloadedFilename,
                    s3Key: permanentS3Key,
                    sizeBytes: fileStat.size,
                    mimeType: mime.lookup(localFilePath) || 'application/octet-stream',
                    status: finalStatus,
                },
            })

            // –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞, —Å—Ç–∞–≤–∏–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            if (updatedAsset.assetType === 'MEDIA_SOURCE') {
                await addMediaJob({ assetId: updatedAsset.id })
            }

            console.log(`[DownloadWorker] ‚úÖ –§–∞–π–ª –¥–ª—è –∞—Å—Å–µ—Ç–∞ #${assetId} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3.`)
        } catch (error: any) {
            const errorMessage = error.stderr || error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞'
            await prisma.fileAsset.update({
                where: { id: assetId },
                data: { status: 'ERROR' }, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
            })
            console.error(`[DownloadWorker] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Å—Å–µ—Ç–∞ #${assetId}:`, errorMessage)
            throw error // –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è BullMQ
        } finally {
            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            await rm(tempDir, { recursive: true, force: true })
        }
    },
    { connection }
)

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ú–ï–î–ò–ê-–ö–û–ù–í–ï–ô–ï–†–ê (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞) ===
const processMediaWorker = new Worker<ProcessMediaJobData>('process-media-job', async (job) => {
    console.log(`[MediaWorker Stub] –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞. AssetId: ${job.data.assetId}`);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∏–∑ –ö–æ–º–º–∏—Ç–∞ 4.1
    await new Promise(resolve => setTimeout(resolve, 5000));
    // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await prisma.fileAsset.update({
        where: { id: job.data.assetId },
        data: { status: 'AVAILABLE' }
    });
    console.log(`[MediaWorker Stub] –ó–∞–¥–∞—á–∞ ${job.id} '–∑–∞–≤–µ—Ä—à–µ–Ω–∞'.`);
}, { connection });

// === –ó–ê–î–ê–ß–ê-–°–¢–û–†–û–ñ –ó–ê –ú–ï–¢–ê–î–ê–ù–ù–´–ú–ò ===
const watchMetadataWorker = new Worker<WatchMetadataJobData>(
    'watch-metadata-job',
    async (job) => {
        const { torrentId, hashString } = job.data;
        console.log(`[WatcherWorker] –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ ID: ${torrentId}`);

        const { torrents } = await transmission.get(torrentId, ['metadataPercentComplete', 'files']);

        if (!torrents || torrents.length === 0) {
            console.warn(`[WatcherWorker] –¢–æ—Ä—Ä–µ–Ω—Ç ID ${torrentId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Transmission. –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.`);
            return; // –¢–æ—Ä—Ä–µ–Ω—Ç –º–æ–≥–ª–∏ —É–¥–∞–ª–∏—Ç—å, –∑–∞–¥–∞—á–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞
        }

        const torrent = torrents[0];

        if (torrent.metadataPercentComplete < 1) {
            // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã, –ø–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É,
            // —á—Ç–æ–±—ã BullMQ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã (—Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º backoff)
            throw new Error(`–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è ${hashString} –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã (${torrent.metadataPercentComplete * 100}%). –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...`);
        }

        // –ú–ï–¢–ê–î–ê–ù–ù–´–ï –ì–û–¢–û–í–´
        console.log(`[WatcherWorker] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è ${hashString} –ø–æ–ª—É—á–µ–Ω—ã!`);

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ —Ñ–∞–π–ª–æ–≤
        const allFileIndexes = torrent.files.map((_: any, index: number) => index);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        await transmission.set(torrentId, {
            'files-unwanted': allFileIndexes
        });

        console.log(`[WatcherWorker] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –í–°–ï–• —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ ${hashString} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
        // –ù–∞ —ç—Ç–æ–º —Ä–∞–±–æ—Ç–∞ "—Å—Ç–æ—Ä–æ–∂–∞" –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–Ω —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∏ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏.
    },
    { connection }
);



// --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π ---
downloadUrlWorker.on('completed', job => console.log(`[Queue] –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–¥–∞—á–∞ 'download-url' #${job.id}`));
downloadUrlWorker.on('failed', (job, err) => console.error(`[Queue] –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ 'download-url' #${job?.id}: ${err.message}`));
processMediaWorker.on('completed', job => console.log(`[Queue] –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–¥–∞—á–∞ 'process-media' #${job.id}`));
processMediaWorker.on('failed', (job, err) => console.error(`[Queue] –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ 'process-media' #${job?.id}: ${err.message}`));

watchMetadataWorker.on('completed', job => console.log(`[Queue] –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–¥–∞—á–∞ 'watch-metadata' #${job.id}`));
watchMetadataWorker.on('failed', (job, err) => console.error(`[Queue] –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ 'watch-metadata' #${job?.id}: ${err.message}`));


console.log('üöÄ –í–æ—Ä–∫–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ...');