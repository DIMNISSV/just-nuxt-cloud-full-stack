import { Worker } from 'bullmq'
import { execa } from 'execa'
import path from 'path'
import { mkdir, readdir, rm, stat } from 'fs/promises'
import mime from 'mime-types'
import prisma from './server/utils/prisma'
import { uploadToS3 } from './server/utils/s3'
import { appConfig, runtimeConfig } from './config'
import type { DownloadUrlJobData, ProcessMediaJobData } from './server/utils/queue'
import { addMediaJob } from './server/utils/queue'
// console.log(await transmission.all())

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
const redisConfig = runtimeConfig.redis
const connection = { host: redisConfig.host, port: redisConfig.port }
const tempDirBase = appConfig.worker.tempDir
console.log('[Worker] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis:', connection);
// ======================================================================
// 1. –í–û–†–ö–ï–† –ó–ê–ì–†–£–ó–ö–ò –ü–û URL
// ======================================================================
const downloadUrlWorker = new Worker<DownloadUrlJobData>(
    'download-url-job',
    async (job) => {
        // ... (—ç—Ç–æ—Ç –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        const { assetId, sourceUrl } = job.data
        console.log(`[DownloadWorker] –ù–∞—á–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ URL –¥–ª—è Asset ID: ${assetId}`)

        const asset = await prisma.fileAsset.findUnique({ where: { id: assetId } })
        if (!asset) throw new Error(`–ê—Å—Å–µ—Ç ${assetId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`)

        const tempDir = path.join(tempDirBase, asset.uuid)
        await mkdir(tempDir, { recursive: true })

        try {
            await prisma.fileAsset.update({ where: { id: assetId }, data: { status: 'PROCESSING' } })
            await execa(appConfig.binaries.ytdlp, ['-P', tempDir, '-o', '%(title)s.%(ext)s', sourceUrl])
            const files = await readdir(tempDir)
            if (files.length === 0) throw new Error('–§–∞–π–ª –Ω–µ –±—ã–ª —Å–∫–∞—á–∞–Ω.')
            const downloadedFilename = files[0]
            const localFilePath = path.join(tempDir, downloadedFilename)
            const fileStat = await stat(localFilePath)
            const permanentS3Key = asset.assetType === 'PERSONAL'
                ? `personal/${asset.userId}/${asset.uuid}/${downloadedFilename}`
                : `media/sources/${asset.uuid}/${downloadedFilename}`
            await uploadToS3(localFilePath, permanentS3Key)
            const finalStatus = asset.assetType === 'MEDIA_SOURCE' ? 'PROCESSING' : 'AVAILABLE'
            const updatedAsset = await prisma.fileAsset.update({
                where: { id: assetId },
                data: {
                    originalFilename: downloadedFilename,
                    s3Key: permanentS3Key,
                    sizeBytes: fileStat.size,
                    mimeType: mime.lookup(localFilePath) || 'application/octet-stream',
                    status: finalStatus,
                },
            })
            if (updatedAsset.assetType === 'MEDIA_SOURCE') {
                await addMediaJob({ assetId: updatedAsset.id })
            }
            console.log(`[DownloadWorker] ‚úÖ –§–∞–π–ª –¥–ª—è –∞—Å—Å–µ—Ç–∞ #${assetId} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3.`)
        } catch (error: any) {
            const errorMessage = error.stderr || error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞'
            await prisma.fileAsset.update({ where: { id: assetId }, data: { status: 'ERROR' } })
            console.error(`[DownloadWorker] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Å—Å–µ—Ç–∞ #${assetId}:`, errorMessage)
            throw error
        } finally {
            await rm(tempDir, { recursive: true, force: true })
        }
    },
    { connection }
)

// ======================================================================
// 2. –í–û–†–ö–ï–†–´-–ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –ë–£–î–£–©–ò–• –ö–û–ú–ú–ò–¢–û–í
// ======================================================================
const processMediaWorker = new Worker<ProcessMediaJobData>('process-media-job', async (job) => {
    console.log(`[MediaWorker Stub] –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞. AssetId: ${job.data.assetId}`);
    await new Promise(resolve => setTimeout(resolve, 5000));
    await prisma.fileAsset.update({ where: { id: job.data.assetId }, data: { status: 'AVAILABLE' } });
    console.log(`[MediaWorker Stub] –ó–∞–¥–∞—á–∞ ${job.id} '–∑–∞–≤–µ—Ä—à–µ–Ω–∞'.`);
}, { connection });

// const processTorrentWorker = new Worker<ProcessTorrentJobData>('process-torrent-job', async (job) => {
//     console.log(`[TorrentWorker Stub] –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞: ${job.data.hashString}`);
//     await new Promise(resolve => setTimeout(resolve, 10000));
//     console.log(`[TorrentWorker Stub] –ó–∞–¥–∞—á–∞ ${job.id} '–∑–∞–≤–µ—Ä—à–µ–Ω–∞'.`);
// }, { connection });
// const watchMetadataWorker = new Worker<WatchMetadataJobData>(
//     'watch-metadata-job',
//     async (job) => {
//         console.log(`[WatcherWorker] –í–ó–Ø–õ –í –†–ê–ë–û–¢–£ –ó–ê–î–ê–ß–£ #${job.id} –¥–ª—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ ID: ${job.data.torrentId}`);
//         await new Promise(resolve => setTimeout(resolve, 10000));
//         console.log(`[WatcherWorker] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –í–°–ï–• —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ ${hashString} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.`);
//     },
//     { connection }
// );

// ======================================================================
// –ì–õ–û–ë–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–û–ë–´–¢–ò–ô –í–û–†–ö–ï–†–û–í
// ======================================================================
const workers = [downloadUrlWorker, processMediaWorker];

workers.forEach(worker => {
    worker.on('completed', job => console.log(`[Queue] –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–¥–∞—á–∞ #${job.id} –≤ –æ—á–µ—Ä–µ–¥–∏ '${worker.name}'`));
    worker.on('failed', (job, err) => console.error(`[Queue] –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ #${job?.id} –≤ –æ—á–µ—Ä–µ–¥–∏ '${worker.name}': ${err.message}`));
});

console.log('üöÄ –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ...');