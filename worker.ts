import { Worker } from 'bullmq'
// import { execa } from 'execa'
// import path from 'path'
// import { mkdir, readdir, rm, stat } from 'fs/promises'
// import mime from 'mime-types'
import prisma from './server/utils/prisma'
// import { uploadToS3 } from './server/utils/s3'
import { appConfig, runtimeConfig } from './config'
import type { DownloadUrlJobData, ProcessMediaJobData } from './server/utils/queue'
import { NodeStatus } from '@prisma/client'
// import { addMediaJob } from './server/utils/queue'

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
const redisConfig = runtimeConfig.redis
const connection = { host: redisConfig.host, port: redisConfig.port }
console.log('[Worker] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis:', connection);

// ======================================================================
// 1. –í–û–†–ö–ï–† –ó–ê–ì–†–£–ó–ö–ò –ü–û URL (–ó–ê–ì–õ–£–®–ö–ê –î–õ–Ø –°–ü–†–ò–ù–¢–ê 2)
// ======================================================================
// TODO: –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º StorageNode –≤ –°–ø—Ä–∏–Ω—Ç–µ 2
const downloadUrlWorker = new Worker<DownloadUrlJobData>(
    'download-url-job',
    async (job) => {
        const { nodeId, sourceUrl } = job.data
        console.log(`[DownloadWorker STUB] –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è URL: ${sourceUrl}, Node ID: ${nodeId}.`);
        await new Promise(resolve => setTimeout(resolve, 5000)); // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        console.log(`[DownloadWorker STUB] –ó–∞–¥–∞—á–∞ –¥–ª—è Node ID: ${nodeId} '–∑–∞–≤–µ—Ä—à–µ–Ω–∞'.`);
    },
    { connection }
)

// ======================================================================
// 2. –í–û–†–ö–ï–† –û–ë–†–ê–ë–û–¢–ö–ò –ú–ï–î–ò–ê (–ó–ê–ì–õ–£–®–ö–ê –î–õ–Ø –°–ü–†–ò–ù–¢–ê 3)
// ======================================================================
const processMediaWorker = new Worker<ProcessMediaJobData>('process-media-job', async (job) => {
    console.log(`[MediaWorker STUB] –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞. NodeId: ${job.data.nodeId}`);
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–æ–ª–≥—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    await prisma.storageNode.update({ where: { id: job.data.nodeId }, data: { status: NodeStatus.PROCESSING } });
    await new Promise(resolve => setTimeout(resolve, 10000)); // –ò–º–∏—Ç–∞—Ü–∏—è ffmpeg
    // –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é "–æ–±—Ä–∞–±–æ—Ç–∫–∏" –ø–æ–º–µ—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–π
    await prisma.storageNode.update({ where: { id: job.data.nodeId }, data: { status: NodeStatus.AVAILABLE } });
    console.log(`[MediaWorker STUB] –ó–∞–¥–∞—á–∞ ${job.id} '–∑–∞–≤–µ—Ä—à–µ–Ω–∞'.`);
}, { connection });


// ======================================================================
// –ì–õ–û–ë–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–û–ë–´–¢–ò–ô –í–û–†–ö–ï–†–û–í
// ======================================================================
const workers = [downloadUrlWorker, processMediaWorker];

workers.forEach(worker => {
    worker.on('completed', job => console.log(`[Queue] –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–¥–∞—á–∞ #${job.id} –≤ –æ—á–µ—Ä–µ–¥–∏ '${worker.name}'`));
    worker.on('failed', (job, err) => console.error(`[Queue] –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ #${job?.id} –≤ –æ—á–µ—Ä–µ–¥–∏ '${worker.name}': ${err.message}`));
});

console.log('üöÄ –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ...');