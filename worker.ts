import { Worker } from 'bullmq'
import { execa } from 'execa'
import path from 'path'
import { mkdir, readdir, rm } from 'fs/promises'
import prisma from './server/utils/prisma'
import { uploadToS3 } from './worker/s3'
import { appConfig, runtimeConfig } from './config'
import { StreamType } from '@prisma/client'

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
const queueName = 'url-processing'
const tempDirBase = appConfig.worker.tempDir

const connection = {
    host: runtimeConfig.redis.host,
    port: runtimeConfig.redis.port,
}

// --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –í–û–†–ö–ï–†–ê ---
const worker = new Worker(
    queueName,
    async (job) => {
        const { uploadId } = job.data
        console.log(`[Worker] –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è Upload ID: ${uploadId}`)

        const upload = await prisma.upload.findUnique({ where: { id: uploadId } })
        if (!upload) {
            throw new Error(`–ó–∞–≥—Ä—É–∑–∫–∞ —Å ID ${uploadId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î.`)
        }

        const tempDir = path.join(tempDirBase, upload.uuid)
        await mkdir(tempDir, { recursive: true })

        let actualDownloadedFilePath = ''

        try {
            await job.updateProgress(10)
            await prisma.upload.update({ where: { id: uploadId }, data: { status: 'DOWNLOADING' } })
            console.log(`[Worker][${uploadId}] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å ${upload.source}`)

            // --- ‚òÖ –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–∫–∞—á–∏–≤–∞–µ–º –≤ –ø–∞–ø–∫—É –∏ –∏—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
            // –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.
            // –ú—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ stdout.
            await execa(
                appConfig.binaries.ytdlp,
                [
                    // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ. yt-dlp —Å–∞–º —Å–æ–∑–¥–∞—Å—Ç —Ñ–∞–π–ª –≤–Ω—É—Ç—Ä–∏.
                    // –§–ª–∞–≥ -P (–∏–ª–∏ --paths) - –±–æ–ª–µ–µ —è–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.
                    '-P',
                    tempDir,
                    // –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                    '-o',
                    '%(title)s.%(ext)s',
                    upload.source,
                ],
            )

            // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª.
            const filesInTempDir = await readdir(tempDir)
            if (filesInTempDir.length === 0) {
                throw new Error('yt-dlp –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –Ω–æ –≤ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.')
            }
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª.
            // –í –±—É–¥—É—â–µ–º –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –ª–æ–≥–∏–∫—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É—Å–ª–æ–∂–Ω–∏—Ç—å.
            const downloadedFilename = filesInTempDir[0]
            actualDownloadedFilePath = path.join(tempDir, downloadedFilename)
            // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

            console.log(`[Worker][${uploadId}] –§–∞–π–ª —Å–∫–∞—á–∞–Ω: ${downloadedFilename}`)
            await prisma.upload.update({
                where: { id: uploadId },
                data: { status: 'PROCESSING', originalFilename: downloadedFilename },
            })

            await job.updateProgress(50)
            console.log(`[Worker][${uploadId}] –ó–∞–ø—É—Å–∫ –¥–µ–º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–∞: ${actualDownloadedFilePath}`)

            const { stdout: ffprobeOutput } = await execa(appConfig.binaries.ffprobe, [
                '-v', 'error',
                '-show_entries', 'stream=index,codec_type,codec_name,tags',
                '-of', 'json',
                actualDownloadedFilePath,
            ]);

            const probeData = JSON.parse(ffprobeOutput);
            const streamsToCreate: { type: StreamType; filePath: string; title: string; language?: string; codecInfo?: string }[] = [];
            const ffmpegArgs = ['-i', actualDownloadedFilePath];

            for (const stream of probeData.streams) {
                const streamIndex = stream.index;
                const ext = stream.codec_type === 'subtitle' ? (stream.codec_name || 'srt') : (stream.codec_type === 'video' ? 'mkv' : 'mka');
                const outputFilename = `stream_${streamIndex}.${ext}`;
                const localStreamPath = path.join(tempDir, outputFilename);
                const s3Key = `uploads/${upload.uuid}/${outputFilename}`;

                ffmpegArgs.push('-map', `0:${streamIndex}`, '-c', 'copy', localStreamPath);

                streamsToCreate.push({
                    type: stream.codec_type.toUpperCase() as StreamType,
                    filePath: s3Key,
                    title: stream.tags?.title || `${stream.codec_type.toUpperCase()} Stream #${streamIndex}`,
                    language: stream.tags?.language,
                    codecInfo: stream.codec_name,
                });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –∏–∑–≤–ª–µ–∫–∞—Ç—å
            if (streamsToCreate.length > 0) {
                await execa(appConfig.binaries.ffmpeg, ffmpegArgs);
                console.log(`[Worker][${uploadId}] –î–µ–º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.`);
            } else {
                console.log(`[Worker][${uploadId}] –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è.`);
            }


            await job.updateProgress(80)
            for (const streamData of streamsToCreate) {
                const localPath = path.join(tempDir, path.basename(streamData.filePath));
                await uploadToS3(localPath, streamData.filePath);
                await prisma.mediaStream.create({
                    data: {
                        uploadId: upload.id,
                        ...streamData
                    }
                })
            }

            await prisma.upload.update({ where: { id: uploadId }, data: { status: 'COMPLETED', statusMessage: null } })
            await job.updateProgress(100)
            console.log(`[Worker][${uploadId}] ‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`)
        }
        catch (error: any) {
            const errorMessage = error.stderr || error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞';
            console.error(`[Worker][${uploadId}] ‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:`, errorMessage)
            await prisma.upload.update({
                where: { id: uploadId },
                data: { status: 'ERROR', statusMessage: errorMessage.substring(0, 500) },
            })
            throw error
        }
        finally {
            await rm(tempDir, { recursive: true, force: true })
            console.log(`[Worker][${uploadId}] –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞.`)
        }
    },
    { connection },
)

worker.on('completed', job => console.log(`[Queue] –ó–∞–≤–µ—Ä—à–µ–Ω–æ: –∑–∞–¥–∞—á–∞ ${job.id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.`))
worker.on('failed', (job, err) => console.error(`[Queue] –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ ${job?.id} –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: ${err.message}`))

console.log('üöÄ –í–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–¥–∞—á–∏...')

process.on('SIGINT', async () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–∫—Ä—ã—Ç–∏–µ –≤–æ—Ä–∫–µ—Ä–∞...');
    await worker.close();
    process.exit(0);
});