import { Worker } from 'bullmq'
import { execa } from 'execa'
import path from 'path'
import { mkdir, readdir, rm, stat } from 'fs/promises'
import mime from 'mime-types'
import prisma from './server/utils/prisma'
import { uploadToS3 } from './server/utils/s3'
import { appConfig, runtimeConfig } from './config'
import type { DownloadUrlJobData, ProcessMediaJobData } from './server/utils/queue'
import { NodeStatus } from '@prisma/client'

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
const redisConfig = runtimeConfig.redis
const connection = { host: redisConfig.host, port: redisConfig.port }
const tempDirBase = appConfig.worker.tempDir
console.log('[Worker] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis:', connection);

// ======================================================================
// 1. –í–û–†–ö–ï–† –ó–ê–ì–†–£–ó–ö–ò –ü–û URL (‚òÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê)
// ======================================================================
const downloadUrlWorker = new Worker<DownloadUrlJobData>(
    'download-url-job',
    async (job) => {
        const { nodeUuid, sourceUrl } = job.data;
        console.log(`[DownloadWorker] –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL: ${sourceUrl} –¥–ª—è Node: ${nodeUuid}`);

        // ‚òÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –º—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏ ownerId, –∏ meta
        const node = await prisma.storageNode.findUnique({
            where: { uuid: nodeUuid },
            select: { ownerId: true, meta: true }
        });
        if (!node) throw new Error(`–£–∑–µ–ª ${nodeUuid} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`);

        const tempDir = path.join(tempDirBase, nodeUuid);
        await mkdir(tempDir, { recursive: true });

        try {
            await prisma.storageNode.update({ where: { uuid: nodeUuid }, data: { status: NodeStatus.PROCESSING } });
            await execa(appConfig.binaries.ytdlp, ['-P', tempDir, '-o', '%(title)s.%(ext)s', sourceUrl]);

            const files = await readdir(tempDir);
            if (files.length === 0) throw new Error('yt-dlp –Ω–µ —Å–∫–∞—á–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.');

            const downloadedFilename = files[0];
            const localFilePath = path.join(tempDir, downloadedFilename);
            const fileStat = await stat(localFilePath);

            const permanentS3Key = `drive/${node.ownerId}/${nodeUuid}/${encodeURIComponent(downloadedFilename)}`;
            await uploadToS3(localFilePath, permanentS3Key);

            await prisma.storageNode.update({
                where: { uuid: nodeUuid },
                data: {
                    name: downloadedFilename,
                    s3Key: permanentS3Key,
                    sizeBytes: fileStat.size,
                    mimeType: mime.lookup(localFilePath) || 'application/octet-stream',
                    status: NodeStatus.AVAILABLE,
                },
            });
            console.log(`[DownloadWorker] ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω Node: ${nodeUuid}`);

        } catch (error: any) {
            const errorMessage = error.stderr || error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞';
            await prisma.storageNode.update({
                where: { uuid: nodeUuid },
                data: { status: NodeStatus.ERROR, meta: { ...(node.meta as object || {}), error: errorMessage } },
            });
            console.error(`[DownloadWorker] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Node ${nodeUuid}:`, errorMessage);
            throw error;
        } finally {
            await rm(tempDir, { recursive: true, force: true });
        }
    },
    { connection }
);

// ======================================================================
// 2. –í–û–†–ö–ï–† –û–ë–†–ê–ë–û–¢–ö–ò –ú–ï–î–ò–ê (–ó–ê–ì–õ–£–®–ö–ê –î–õ–Ø –°–ü–†–ò–ù–¢–ê 3)
// ======================================================================
const processMediaWorker = new Worker<ProcessMediaJobData>('process-media-job', async (job) => {
    // ... –∑–∞–≥–ª—É—à–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
}, { connection });


// ======================================================================
// –ì–õ–û–ë–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–û–ë–´–¢–ò–ô –í–û–†–ö–ï–†–û–í
// ======================================================================
const workers = [downloadUrlWorker, processMediaWorker];

workers.forEach(worker => {
    worker.on('completed', job => console.log(`[Queue] –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–¥–∞—á–∞ #${job.id} –≤ –æ—á–µ—Ä–µ–¥–∏ '${worker.name}'`));
    worker.on('failed', (job, err) => console.error(`[Queue] –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ #${job?.id} –≤ –æ—á–µ—Ä–µ–¥–∏ '${worker.name}': ${err.message}`));
});

console.log('üöÄ –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ...');